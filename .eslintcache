[{"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\index.js":"1","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\App.js":"2","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Login\\Login.js":"3","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Widgets\\Widgets.js":"4","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\Feed.js":"5","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Sidebar\\Sidebar.js":"6","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\firebase.js":"7","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\Post\\Post.js":"8","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\TweetBox\\TweetBox.js":"9","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Sidebar\\SidebarOption\\SidebarOption.js":"10","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\hooks\\useLongPress.js":"11","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\SinglePost\\SinglePost.js":"12"},{"size":230,"mtime":1622798797809,"results":"13","hashOfConfig":"14"},{"size":1621,"mtime":1622809549663,"results":"15","hashOfConfig":"14"},{"size":2287,"mtime":1622798797736,"results":"16","hashOfConfig":"14"},{"size":1456,"mtime":1622798797790,"results":"17","hashOfConfig":"14"},{"size":1041,"mtime":1622798797675,"results":"18","hashOfConfig":"14"},{"size":4254,"mtime":1622798797756,"results":"19","hashOfConfig":"14"},{"size":926,"mtime":1622808965454,"results":"20","hashOfConfig":"14"},{"size":10072,"mtime":1622798797697,"results":"21","hashOfConfig":"14"},{"size":5452,"mtime":1622798797719,"results":"22","hashOfConfig":"14"},{"size":264,"mtime":1607487515483,"results":"23","hashOfConfig":"14"},{"size":1673,"mtime":1622798797791,"results":"24","hashOfConfig":"14"},{"size":1599,"mtime":1622809742210,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mvp7tm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\index.js",[],["57","58"],"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\App.js",["59"],"import { useEffect, useRef } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Feed from \"./components/Feed/Feed\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Sidebar from \"./components/Sidebar/Sidebar\";\r\nimport Widgets from \"./components/Widgets/Widgets\";\r\nimport db, { auth } from \"./firebase\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport SinglePost from \"./components/SinglePost/SinglePost\";\r\n\r\nfunction App() {\r\n  const [user] = useAuthState(auth);\r\n  const input = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      db.collection(\"users\")\r\n        .doc(user.uid)\r\n        .set(\r\n          {\r\n            email: user.email || user.providerData[0].email,\r\n            uid: user.uid,\r\n            photoURL: user.photoURL,\r\n          },\r\n          { merge: true }\r\n        );\r\n    }\r\n  }, [user]);\r\n\r\n  if (!user) {\r\n    return (\r\n      <>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\">\r\n              <Login />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    // BEM naming convention\r\n    <div className=\"app\">\r\n      <>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/tweet/:id\">\r\n              <SinglePost />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Sidebar input={input} />\r\n              <Feed input={input} />\r\n              <Widgets />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Login\\Login.js",["60"],"import \"./Login.css\";\r\nimport login__logo from \"./logo-with-text.png\";\r\nimport db, { auth, provider, twitterProvider } from \"../../firebase\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  TwitterLoginButton,\r\n  GoogleLoginButton,\r\n} from \"react-social-login-buttons\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { FadingCircle } from \"better-react-spinkit\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const [user, loading] = useAuthState(auth);\r\n\r\n  // useEffect(() => {\r\n  //   const unsubscribe = auth.onAuthStateChanged((authUser) => {\r\n  //     if (authUser) {\r\n  //       history.push(\"/\");\r\n  //     }\r\n  //   });\r\n\r\n  //   return unsubscribe;\r\n  // }, []);\r\n\r\n  const signIn = () => {\r\n    // sign in...\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((authUser) => {\r\n        db.collection(\"users\").doc(authUser.user.uid).set(\r\n          {\r\n            email: authUser.user.email,\r\n            uid: authUser.user.uid,\r\n            photoURL: authUser.user.photoURL,\r\n          },\r\n          { merge: true }\r\n        );\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  const signInWithTwitter = () => {\r\n    auth\r\n      .signInWithPopup(twitterProvider)\r\n      .then((authUser) => {\r\n        db.collection(\"users\")\r\n          .doc(authUser.user.uid)\r\n          .set(\r\n            {\r\n              email: authUser.user.email || authUser.user.providerData[0].email,\r\n              uid: authUser.user.uid,\r\n              photoURL: authUser.user.photoURL,\r\n            },\r\n            { merge: true }\r\n          );\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <img src={login__logo} alt=\"twitterLogo\" className=\"login__logo\" />\r\n      {loading ? (\r\n        <>\r\n          <h2>Logging you in...</h2>\r\n          <div className=\"space\" />\r\n          <FadingCircle size={80} color=\"white\" />\r\n        </>\r\n      ) : (\r\n        <div className=\"login__loginButtons\">\r\n          <TwitterLoginButton onClick={signInWithTwitter} />\r\n          <div className=\"space\" />\r\n          <GoogleLoginButton onClick={signIn} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Widgets\\Widgets.js",["61"],"import \"./Widgets.css\";\r\nimport {\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n  TwitterFollowButton,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Widgets() {\r\n  const [showTweet, setShowTweet] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setShowTweet(true);\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__search\">\r\n        <SearchIcon />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n      <div className=\"widgets__widgetContainer\">\r\n        <div className=\"widgets__h2\">\r\n          <h2>Whatâ€™s happening</h2>\r\n        </div>\r\n        <div className=\"widgets__tweetEmbed\">\r\n          <TwitterTweetEmbed\r\n            options={{ theme: \"dark\" }}\r\n            tweetId={\"1318970966014193664\"}\r\n          />\r\n        </div>\r\n        <div className=\"widgets__tweetShare\">\r\n          <TwitterShareButton\r\n            url={\"https://twitter-clone-abc.web.app/\"}\r\n            options={{\r\n              text: \"This #Twitter Clone is amazing, just looks like the real Twitter website!!\",\r\n              via: \"PrashoonB\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"widgets__folllowButton\">\r\n          <TwitterFollowButton screenName={\"PrashoonB\"} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\Feed.js",[],"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Sidebar\\Sidebar.js",["62"],"import \"./Sidebar.css\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport SidebarOption from \"./SidebarOption/SidebarOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { auth } from \"../../firebase\";\r\n\r\nfunction Sidebar({ input }) {\r\n  const [user] = useAuthState(auth);\r\n\r\n  const userEmail = user?.email || user?.providerData[0].email;\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/\">\r\n        <TwitterIcon className=\"sidebar__icon\" />\r\n      </Link>\r\n\r\n      <Link style={{ textDecoration: \"none\" }} to=\"/\">\r\n        <SidebarOption active Icon={HomeIcon} text=\"Home\" />\r\n      </Link>\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/explore\"> */}\r\n      <SidebarOption Icon={ExploreIcon} text=\"Explore\" />\r\n      {/* </Link> */}\r\n      {/* <Link\r\n        style={{ textDecoration: \"none\", color: \"white\" }}\r\n        to=\"/notifications\"\r\n      > */}\r\n      <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\r\n      {/* </Link> */}\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/messages\"> */}\r\n      <SidebarOption Icon={MailOutlineIcon} text=\"Messages\" />\r\n      {/* </Link> */}\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/bookmarks\"> */}\r\n      <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\r\n      {/* </Link> */}\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/lists\"> */}\r\n      <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\r\n      {/* </Link> */}\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/profile\"> */}\r\n      <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\r\n      {/* </Link> */}\r\n      {/* <Link style={{ textDecoration: \"none\", color: \"white\" }} to=\"/more\"> */}\r\n      <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\r\n      {/* </Link> */}\r\n\r\n      <div\r\n        variant=\"outlined\"\r\n        className=\"sidebar__tweetButton\"\r\n        onClick={() => input.current.focus()}\r\n      >\r\n        {/* <AddIcon /> */}\r\n        <svg\r\n          viewBox=\"0 0 24 24\"\r\n          height=\"22\"\r\n          width=\"22\"\r\n          fill=\"#fff\"\r\n          aria-hidden=\"true\"\r\n          class=\"r-jwli3a r-4qtqp9 r-yyyyoo r-1q142lx r-50lct3 r-dnmrzs r-bnwqim r-1plcrui r-lrvibr r-1srniue\"\r\n        >\r\n          <g>\r\n            <path d=\"M8.8 7.2H5.6V3.9c0-.4-.3-.8-.8-.8s-.7.4-.7.8v3.3H.8c-.4 0-.8.3-.8.8s.3.8.8.8h3.3v3.3c0 .4.3.8.8.8s.8-.3.8-.8V8.7H9c.4 0 .8-.3.8-.8s-.5-.7-1-.7zm15-4.9v-.1h-.1c-.1 0-9.2 1.2-14.4 11.7-3.8 7.6-3.6 9.9-3.3 9.9.3.1 3.4-6.5 6.7-9.2 5.2-1.1 6.6-3.6 6.6-3.6s-1.5.2-2.1.2c-.8 0-1.4-.2-1.7-.3 1.3-1.2 2.4-1.5 3.5-1.7.9-.2 1.8-.4 3-1.2 2.2-1.6 1.9-5.5 1.8-5.7z\"></path>\r\n          </g>\r\n        </svg>\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"outlined\"\r\n        className=\"sidebar__tweetButtonBig\"\r\n        fullWidth\r\n        onClick={() => input.current.focus()}\r\n      >\r\n        Tweet\r\n      </Button>\r\n\r\n      <div className=\"sidebar__user\">\r\n        <img\r\n          onClick={() => auth.signOut()}\r\n          src={user?.photoURL}\r\n          height=\"40\"\r\n          width=\"40\"\r\n        />\r\n        <div className=\"sidebar__userMore\">\r\n          <p>\r\n            {user?.displayName.length > 16\r\n              ? `${user?.displayName.substring(0, 16)}...`\r\n              : user?.displayName}\r\n          </p>\r\n          <p className=\"sidebar__username\">\r\n            {userEmail?.length > 16\r\n              ? `@${userEmail?.substring(0, 16)}...`\r\n              : user?.email}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\firebase.js",[],"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\Post\\Post.js",["63"],"import { Avatar } from \"@material-ui/core\";\r\nimport \"./Post.css\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport db, { auth, storage } from \"../../../firebase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useLongPress from \"../../../hooks/useLongPress\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  EmailIcon,\r\n  EmailShareButton,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n  RedditIcon,\r\n  RedditShareButton,\r\n  TelegramIcon,\r\n  TelegramShareButton,\r\n  TwitterIcon,\r\n  TwitterShareButton,\r\n  WhatsappIcon,\r\n  WhatsappShareButton,\r\n} from \"react-share\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 300,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    outline: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"start\",\r\n    color: \"black\",\r\n    flexDirection: \"column\",\r\n    padding: 10,\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Post({\r\n  timestamp,\r\n  displayName,\r\n  username,\r\n  verified,\r\n  uid,\r\n  text,\r\n  image,\r\n  avatar,\r\n  id,\r\n  likes,\r\n  singlePost,\r\n}) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [open2, setOpen2] = useState(false);\r\n  const [user] = useAuthState(auth);\r\n  const [liked, setLiked] = useState(null);\r\n\r\n  const LINK = `${window.location.href}`;\r\n\r\n  const onLongPress = () => {\r\n    if (user?.uid === uid) {\r\n      handleOpen();\r\n    }\r\n  };\r\n\r\n  const defaultOptions = {\r\n    shouldPreventDefault: true,\r\n    delay: 500,\r\n  };\r\n\r\n  const onClick = () => {};\r\n\r\n  const longPressEvent = useLongPress(onLongPress, onClick, defaultOptions);\r\n\r\n  const checkIfLiked = () => {\r\n    db.collection(\"users\")\r\n      .doc(user?.uid)\r\n      .get()\r\n      .then((snapshot) => {\r\n        if (snapshot.exists) {\r\n          setLiked(snapshot.data()[id]);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfLiked();\r\n  }, [checkIfLiked]);\r\n\r\n  const like = (e) => {\r\n    e.cancelBubble = true;\r\n    if (e.stopPropagation) e.stopPropagation();\r\n\r\n    checkIfLiked();\r\n\r\n    setTimeout(() => {\r\n      if (liked !== true) {\r\n        db.collection(\"users\")\r\n          .doc(user.uid)\r\n          .set(\r\n            {\r\n              [id]: true,\r\n            },\r\n            { merge: true }\r\n          );\r\n        db.collection(\"posts\")\r\n          .doc(id)\r\n          .set(\r\n            {\r\n              likes: likes + 1,\r\n            },\r\n            { merge: true }\r\n          );\r\n      } else if (liked === true) {\r\n        db.collection(\"users\")\r\n          .doc(user.uid)\r\n          .set(\r\n            {\r\n              [id]: false,\r\n            },\r\n            { merge: true }\r\n          );\r\n        db.collection(\"posts\")\r\n          .doc(id)\r\n          .set(\r\n            {\r\n              likes: likes - 1,\r\n            },\r\n            { merge: true }\r\n          );\r\n      }\r\n    }, 300);\r\n  };\r\n\r\n  const noEvent = (e) => {\r\n    e.cancelBubble = true;\r\n    if (e.stopPropagation) e.stopPropagation();\r\n  };\r\n\r\n  const share = (e) => {\r\n    e.cancelBubble = true;\r\n    if (e.stopPropagation) e.stopPropagation();\r\n    handleOpen2();\r\n  };\r\n\r\n  const handleOpen = (e) => {\r\n    e?.preventDefault();\r\n\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleOpen2 = (e) => {\r\n    e?.preventDefault();\r\n\r\n    setOpen2(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClose2 = () => {\r\n    setOpen2(false);\r\n  };\r\n\r\n  // window.document.addEventListener(\"contextmenu\", (event) =>\r\n  //   event.preventDefault()\r\n  // );\r\n\r\n  const deletePost = () => {\r\n    handleClose();\r\n\r\n    const confirm = window.confirm(\r\n      \"Are you sure you want to delete this tweet?\"\r\n    );\r\n\r\n    if (singlePost) {\r\n      if (confirm === true) {\r\n        history.push(\"/\");\r\n\r\n        setTimeout(() => {\r\n          db.collection(\"posts\").doc(id).delete();\r\n\r\n          if (image) {\r\n            storage.ref(`posts/${id}`).delete();\r\n          }\r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    if (!singlePost) {\r\n      if (confirm === true) {\r\n        db.collection(\"posts\").doc(id).delete();\r\n\r\n        if (image) {\r\n          storage.ref(`posts/${id}`).delete();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // const editPost = () => {\r\n  //   const newMessage = prompt(\"Please enter the new tweet -\");\r\n\r\n  //   if (!newMessage || newMessage[0] === \" \") {\r\n  //     return;\r\n  //   }\r\n\r\n  //   db.collection(\"posts\").doc(id).update({\r\n  //     text: newMessage,\r\n  //   });\r\n\r\n  //   handleClose();\r\n  // };\r\n\r\n  return (\r\n    <div\r\n      className=\"post\"\r\n      onContextMenu={uid === user?.uid && handleOpen}\r\n      {...longPressEvent}\r\n    >\r\n      <div className=\"post__avatarcontainer\">\r\n        <Avatar className=\"post__avatar\" src={avatar} />\r\n      </div>\r\n      <div className=\"post__body\" onClick={() => history.push(`/tweet/${id}`)}>\r\n        <div className=\"post__header\">\r\n          <div className=\"post__headerText\">\r\n            <h3>\r\n              {displayName}{\" \"}\r\n              <span className=\"post__headerSpecial\">\r\n                {verified && <VerifiedUserIcon className=\"post__badge\" />} @\r\n                {username}\r\n              </span>\r\n            </h3>\r\n            <p className=\"post__timestamp\">{`${new Date(\r\n              timestamp?.toDate()\r\n            ).toUTCString()}`}</p>\r\n          </div>\r\n          <div className=\"post__headerDescription\">\r\n            <p>{text}</p>\r\n          </div>\r\n        </div>\r\n        {image && <img src={image} alt=\"tweetImg\" loading=\"lazy\" />}\r\n        <div className=\"post__footer\">\r\n          <IconButton onClick={noEvent}>\r\n            <ChatBubbleOutlineIcon\r\n              fontSize=\"small\"\r\n              style={{ color: \"white\" }}\r\n            />\r\n          </IconButton>\r\n          <IconButton onClick={noEvent}>\r\n            <RepeatIcon fontSize=\"small\" style={{ color: \"white\" }} />\r\n          </IconButton>\r\n          <div>\r\n            <IconButton\r\n              className=\"post__likeButton\"\r\n              color=\"secondary\"\r\n              onClick={like}\r\n            >\r\n              {liked ? (\r\n                <FavoriteIcon fontSize=\"small\" style={{ color: \"#E0245E\" }} />\r\n              ) : (\r\n                <FavoriteBorderIcon\r\n                  fontSize=\"small\"\r\n                  className=\"post__likeIcon\"\r\n                />\r\n              )}\r\n              {likes > 0 && (\r\n                <>\r\n                  {liked ? (\r\n                    <p className=\"post__likeText\">{likes}</p>\r\n                  ) : (\r\n                    <p className=\"post__unlikeText\">{likes}</p>\r\n                  )}\r\n                </>\r\n              )}\r\n            </IconButton>\r\n          </div>\r\n          <IconButton\r\n            color=\"primary\"\r\n            onClick={share}\r\n            className=\"post__shareButton\"\r\n          >\r\n            <PublishIcon className=\"post__shareIcon\" fontSize=\"small\" />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <Modal open={open} onClose={handleClose} className={classes.modal}>\r\n        <div className={classes.paper}>\r\n          {user?.uid === uid && (\r\n            <>\r\n              <div onClick={deletePost} className=\"post__btn\">\r\n                <p style={{ color: \"red\" }}>Delete Tweet</p>\r\n              </div>\r\n              {/* <div onClick={editPost} className=\"post__btn\">\r\n                <p>Edit Tweet</p>\r\n              </div> */}\r\n            </>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n      <Modal open={open2} onClose={handleClose2} className={classes.modal}>\r\n        <div className={classes.paper}>\r\n          <h2>Share</h2>\r\n          <div className=\"space\" />\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-evenly\",\r\n              width: \"80%\",\r\n              marginLeft: -10,\r\n            }}\r\n          >\r\n            <EmailShareButton\r\n              subject=\"Twitter Clone Tweet\"\r\n              body={\"Hi, check out this tweet on the Twitter clone!!\"}\r\n              url={LINK}\r\n            >\r\n              <EmailIcon size={32} round={true} />\r\n            </EmailShareButton>\r\n\r\n            <TwitterShareButton\r\n              title={\"Hi, check out this tweet on the Twitter clone!!\"}\r\n              via=\"PrashoonB\"\r\n              url={LINK}\r\n            >\r\n              <TwitterIcon size={32} round={true} />\r\n            </TwitterShareButton>\r\n\r\n            <FacebookShareButton\r\n              quote=\"Hi, check out this tweet on the Twitter clone!\"\r\n              url={LINK}\r\n            >\r\n              <FacebookIcon size={32} round={true} />\r\n            </FacebookShareButton>\r\n\r\n            <WhatsappShareButton\r\n              title={\"Hi, check out this tweet on the Twitter clone!!\"}\r\n              url={LINK}\r\n            >\r\n              <WhatsappIcon size={32} round={true} />\r\n            </WhatsappShareButton>\r\n\r\n            <TelegramShareButton\r\n              title={\"Hi, check out this tweet on the Twitter clone!!\"}\r\n              url={LINK}\r\n            >\r\n              <TelegramIcon size={32} round={true} />\r\n            </TelegramShareButton>\r\n\r\n            <RedditShareButton\r\n              title={\"Hi, check out this tweet on the Twitter clone!!\"}\r\n              url={LINK}\r\n            >\r\n              <RedditIcon size={32} round={true} />\r\n            </RedditShareButton>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Feed\\TweetBox\\TweetBox.js",["64","65"],"import { Avatar, Button } from \"@material-ui/core\";\r\nimport ImageOutlinedIcon from \"@material-ui/icons/ImageOutlined\";\r\nimport GifOutlinedIcon from \"@material-ui/icons/GifOutlined\";\r\nimport PollOutlinedIcon from \"@material-ui/icons/PollOutlined\";\r\nimport EmojiEmotionsOutlinedIcon from \"@material-ui/icons/EmojiEmotionsOutlined\";\r\nimport CalendarTodayOutlinedIcon from \"@material-ui/icons/CalendarTodayOutlined\";\r\nimport \"./TweetBox.css\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport db, { auth, storage } from \"../../../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport Picker from \"emoji-picker-react\";\r\n\r\nfunction TweetBox({ input }) {\r\n  const [user] = useAuthState(auth);\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [showPicker, setShowPicker] = useState(null);\r\n  const inputFile = useRef(null);\r\n  const [imageToPost, setImageToPost] = useState(null);\r\n\r\n  const onEmojiClick = (event, emojiObject) => {\r\n    setTweetMessage(tweetMessage + emojiObject.emoji);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"posts\")\r\n      .add({\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        displayName: user.displayName,\r\n        username: user.email || user.providerData[0].email,\r\n        verified: user.emailVerified,\r\n        text: tweetMessage,\r\n        avatar: user.photoURL,\r\n        uid: user.uid,\r\n        likes: 0,\r\n      })\r\n      .then((doc) => {\r\n        if (imageToPost) {\r\n          const uploadTask = storage\r\n            .ref(`posts/${doc.id}`)\r\n            .putString(imageToPost, \"data_url\");\r\n\r\n          removeImage();\r\n\r\n          uploadTask.on(\r\n            firebase.storage.TaskEvent.STATE_CHANGED,\r\n            null,\r\n            (error) => console.warn(error),\r\n            () => {\r\n              storage\r\n                .ref(\"posts\")\r\n                .child(doc.id)\r\n                .getDownloadURL()\r\n                .then((url) => {\r\n                  db.collection(\"posts\").doc(doc.id).set(\r\n                    {\r\n                      image: url,\r\n                    },\r\n                    { merge: true }\r\n                  );\r\n                });\r\n            }\r\n          );\r\n        }\r\n      });\r\n\r\n    setTweetMessage(\"\");\r\n    setImageToPost(null);\r\n  };\r\n\r\n  const showEmojiPicker = (e) => {\r\n    e.cancelBubble = true;\r\n    if (e.stopPropagation) e.stopPropagation();\r\n    setShowPicker(!showPicker);\r\n  };\r\n\r\n  const addImageToPost = (e) => {\r\n    const reader = new FileReader();\r\n\r\n    if (e.target.files[0]) {\r\n      if (e.target.files[0].type.substring(0, 5) !== \"image\") {\r\n        return alert(\"Invalid file type uploaded!\");\r\n      }\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n\r\n    reader.onload = (readerEvent) => {\r\n      setImageToPost(readerEvent.target.result);\r\n    };\r\n  };\r\n\r\n  const removeImage = () => {\r\n    setImageToPost(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"tweetBox\" onClick={() => setShowPicker(false)}>\r\n        <form>\r\n          <div className=\"tweetBox__input\">\r\n            <Avatar src={user.photoURL} />\r\n            <div className=\"tweetBox__inputs\">\r\n              <input\r\n                className=\"tweetBox__inputText\"\r\n                value={tweetMessage}\r\n                onChange={(e) => setTweetMessage(e.target.value)}\r\n                placeholder=\"What's happening?\"\r\n                ref={input}\r\n              />\r\n              {imageToPost && (\r\n                <div className=\"tweetBox__previewImgContainer\">\r\n                  <img\r\n                    src={imageToPost}\r\n                    loading=\"lazy\"\r\n                    className=\"tweetBox__previewImg\"\r\n                  />\r\n                  <p className=\"tweetBox__remove\" onClick={removeImage}>\r\n                    Remove\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"tweetBox__alloptions\">\r\n            <div className=\"tweetBox__options\">\r\n              <ImageOutlinedIcon onClick={() => inputFile.current.click()} />\r\n              <input\r\n                type=\"file\"\r\n                hidden\r\n                ref={inputFile}\r\n                onChange={addImageToPost}\r\n                accept=\"image/*\"\r\n              />\r\n              <GifOutlinedIcon className=\"tweetBox__hidden\" />\r\n              <PollOutlinedIcon className=\"tweetBox__hidden\" />\r\n              <EmojiEmotionsOutlinedIcon onClick={showEmojiPicker} />\r\n              <CalendarTodayOutlinedIcon className=\"tweetBox__hidden\" />\r\n            </div>\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={handleSubmit}\r\n              disabled={!tweetMessage || tweetMessage[0] === \" \"}\r\n              className={`tweetBox__btn ${\r\n                (!tweetMessage && \"tweetBox__btn--disabled\") ||\r\n                (tweetMessage[0] === \" \" && \"tweetBox__btn--disabled\")\r\n              }`}\r\n            >\r\n              Tweet\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {showPicker && (\r\n        <div className=\"picker\">\r\n          <Picker\r\n            onEmojiClick={onEmojiClick}\r\n            pickerStyle={{ boxShadow: \"none\" }}\r\n            groupVisibility={{\r\n              recently_used: false,\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n","C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\Sidebar\\SidebarOption\\SidebarOption.js",[],"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\hooks\\useLongPress.js",[],"C:\\Prashoon\\Web development Projects\\Projects\\Succesful Projects\\twitter-clone\\src\\components\\SinglePost\\SinglePost.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":6,"endColumn":11},{"ruleId":"70","severity":1,"message":"74","line":14,"column":10,"nodeType":"72","messageId":"73","endLine":14,"endColumn":14},{"ruleId":"70","severity":1,"message":"75","line":11,"column":10,"nodeType":"72","messageId":"73","endLine":11,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":86,"column":9,"nodeType":"78","endLine":91,"endColumn":11},{"ruleId":"79","severity":1,"message":"80","line":89,"column":9,"nodeType":"81","endLine":98,"endColumn":4,"suggestions":"82"},{"ruleId":"70","severity":1,"message":"83","line":8,"column":10,"nodeType":"72","messageId":"73","endLine":8,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":114,"column":19,"nodeType":"78","endLine":118,"endColumn":21},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'showTweet' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","The 'checkIfLiked' function makes the dependencies of useEffect Hook (at line 102) change on every render. To fix this, wrap the definition of 'checkIfLiked' in its own useCallback() Hook.","VariableDeclarator",["86"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Wrap the definition of 'checkIfLiked' in its own useCallback() Hook.",{"range":"89","text":"90"},[2320,2522],"useCallback(() => {\r\n    db.collection(\"users\")\r\n      .doc(user?.uid)\r\n      .get()\r\n      .then((snapshot) => {\r\n        if (snapshot.exists) {\r\n          setLiked(snapshot.data()[id]);\r\n        }\r\n      });\r\n  })"]